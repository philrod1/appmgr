// Code generated by go-swagger; DO NOT EDIT.

package xapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ModifyXappConfigHandlerFunc turns a function with the right signature into a modify xapp config handler
type ModifyXappConfigHandlerFunc func(ModifyXappConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ModifyXappConfigHandlerFunc) Handle(params ModifyXappConfigParams) middleware.Responder {
	return fn(params)
}

// ModifyXappConfigHandler interface for that can handle valid modify xapp config params
type ModifyXappConfigHandler interface {
	Handle(ModifyXappConfigParams) middleware.Responder
}

// NewModifyXappConfig creates a new http.Handler for the modify xapp config operation
func NewModifyXappConfig(ctx *middleware.Context, handler ModifyXappConfigHandler) *ModifyXappConfig {
	return &ModifyXappConfig{Context: ctx, Handler: handler}
}

/*ModifyXappConfig swagger:route PUT /config xapp modifyXappConfig

Modify xApp config

*/
type ModifyXappConfig struct {
	Context *middleware.Context
	Handler ModifyXappConfigHandler
}

func (o *ModifyXappConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewModifyXappConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
