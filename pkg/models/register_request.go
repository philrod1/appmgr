// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterRequest register request
// swagger:model registerRequest
type RegisterRequest struct {

	// app instance name
	// Required: true
	AppInstanceName *string `json:"appInstanceName"`

	// app name
	// Required: true
	AppName *string `json:"appName"`

	// app version
	AppVersion string `json:"appVersion,omitempty"`

	// Configuration in JSON string format
	Config string `json:"config,omitempty"`

	// config path
	ConfigPath string `json:"configPath,omitempty"`

	// http endpoint
	// Required: true
	HTTPEndpoint *string `json:"httpEndpoint"`

	// rmr endpoint
	// Required: true
	RmrEndpoint *string `json:"rmrEndpoint"`
}

// Validate validates this register request
func (m *RegisterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppInstanceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRmrEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterRequest) validateAppInstanceName(formats strfmt.Registry) error {

	if err := validate.Required("appInstanceName", "body", m.AppInstanceName); err != nil {
		return err
	}

	return nil
}

func (m *RegisterRequest) validateAppName(formats strfmt.Registry) error {

	if err := validate.Required("appName", "body", m.AppName); err != nil {
		return err
	}

	return nil
}

func (m *RegisterRequest) validateHTTPEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("httpEndpoint", "body", m.HTTPEndpoint); err != nil {
		return err
	}

	return nil
}

func (m *RegisterRequest) validateRmrEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("rmrEndpoint", "body", m.RmrEndpoint); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterRequest) UnmarshalBinary(b []byte) error {
	var res RegisterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
