// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"gerrit.o-ran-sc.org/r/ric-plt/appmgr/pkg/restapi/operations/health"
	"gerrit.o-ran-sc.org/r/ric-plt/appmgr/pkg/restapi/operations/xapp"
)

// NewAppManagerAPI creates a new AppManager instance
func NewAppManagerAPI(spec *loads.Document) *AppManagerAPI {
	return &AppManagerAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		XappGetConfigElementHandler: xapp.GetConfigElementHandlerFunc(func(params xapp.GetConfigElementParams) middleware.Responder {
			return middleware.NotImplemented("operation XappGetConfigElement has not yet been implemented")
		}),
		XappModifyXappConfigHandler: xapp.ModifyXappConfigHandlerFunc(func(params xapp.ModifyXappConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation XappModifyXappConfig has not yet been implemented")
		}),
		AddSubscriptionHandler: AddSubscriptionHandlerFunc(func(params AddSubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation AddSubscription has not yet been implemented")
		}),
		DeleteSubscriptionHandler: DeleteSubscriptionHandlerFunc(func(params DeleteSubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteSubscription has not yet been implemented")
		}),
		XappDeployXappHandler: xapp.DeployXappHandlerFunc(func(params xapp.DeployXappParams) middleware.Responder {
			return middleware.NotImplemented("operation XappDeployXapp has not yet been implemented")
		}),
		DeregisterXappHandler: DeregisterXappHandlerFunc(func(params DeregisterXappParams) middleware.Responder {
			return middleware.NotImplemented("operation DeregisterXapp has not yet been implemented")
		}),
		XappGetAllXappConfigHandler: xapp.GetAllXappConfigHandlerFunc(func(params xapp.GetAllXappConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation XappGetAllXappConfig has not yet been implemented")
		}),
		XappGetAllXappsHandler: xapp.GetAllXappsHandlerFunc(func(params xapp.GetAllXappsParams) middleware.Responder {
			return middleware.NotImplemented("operation XappGetAllXapps has not yet been implemented")
		}),
		HealthGetHealthAliveHandler: health.GetHealthAliveHandlerFunc(func(params health.GetHealthAliveParams) middleware.Responder {
			return middleware.NotImplemented("operation HealthGetHealthAlive has not yet been implemented")
		}),
		HealthGetHealthReadyHandler: health.GetHealthReadyHandlerFunc(func(params health.GetHealthReadyParams) middleware.Responder {
			return middleware.NotImplemented("operation HealthGetHealthReady has not yet been implemented")
		}),
		GetSubscriptionByIDHandler: GetSubscriptionByIDHandlerFunc(func(params GetSubscriptionByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSubscriptionByID has not yet been implemented")
		}),
		GetSubscriptionsHandler: GetSubscriptionsHandlerFunc(func(params GetSubscriptionsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSubscriptions has not yet been implemented")
		}),
		XappGetXappByNameHandler: xapp.GetXappByNameHandlerFunc(func(params xapp.GetXappByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation XappGetXappByName has not yet been implemented")
		}),
		XappGetXappInstanceByNameHandler: xapp.GetXappInstanceByNameHandlerFunc(func(params xapp.GetXappInstanceByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation XappGetXappInstanceByName has not yet been implemented")
		}),
		XappListAllXappsHandler: xapp.ListAllXappsHandlerFunc(func(params xapp.ListAllXappsParams) middleware.Responder {
			return middleware.NotImplemented("operation XappListAllXapps has not yet been implemented")
		}),
		ModifySubscriptionHandler: ModifySubscriptionHandlerFunc(func(params ModifySubscriptionParams) middleware.Responder {
			return middleware.NotImplemented("operation ModifySubscription has not yet been implemented")
		}),
		RegisterXappHandler: RegisterXappHandlerFunc(func(params RegisterXappParams) middleware.Responder {
			return middleware.NotImplemented("operation RegisterXapp has not yet been implemented")
		}),
		XappUndeployXappHandler: xapp.UndeployXappHandlerFunc(func(params xapp.UndeployXappParams) middleware.Responder {
			return middleware.NotImplemented("operation XappUndeployXapp has not yet been implemented")
		}),
	}
}

/*AppManagerAPI This is a draft API for RIC appmgr */
type AppManagerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// XappGetConfigElementHandler sets the operation handler for the get config element operation
	XappGetConfigElementHandler xapp.GetConfigElementHandler
	// XappModifyXappConfigHandler sets the operation handler for the modify xapp config operation
	XappModifyXappConfigHandler xapp.ModifyXappConfigHandler
	// AddSubscriptionHandler sets the operation handler for the add subscription operation
	AddSubscriptionHandler AddSubscriptionHandler
	// DeleteSubscriptionHandler sets the operation handler for the delete subscription operation
	DeleteSubscriptionHandler DeleteSubscriptionHandler
	// XappDeployXappHandler sets the operation handler for the deploy xapp operation
	XappDeployXappHandler xapp.DeployXappHandler
	// DeregisterXappHandler sets the operation handler for the deregister xapp operation
	DeregisterXappHandler DeregisterXappHandler
	// XappGetAllXappConfigHandler sets the operation handler for the get all xapp config operation
	XappGetAllXappConfigHandler xapp.GetAllXappConfigHandler
	// XappGetAllXappsHandler sets the operation handler for the get all xapps operation
	XappGetAllXappsHandler xapp.GetAllXappsHandler
	// HealthGetHealthAliveHandler sets the operation handler for the get health alive operation
	HealthGetHealthAliveHandler health.GetHealthAliveHandler
	// HealthGetHealthReadyHandler sets the operation handler for the get health ready operation
	HealthGetHealthReadyHandler health.GetHealthReadyHandler
	// GetSubscriptionByIDHandler sets the operation handler for the get subscription by Id operation
	GetSubscriptionByIDHandler GetSubscriptionByIDHandler
	// GetSubscriptionsHandler sets the operation handler for the get subscriptions operation
	GetSubscriptionsHandler GetSubscriptionsHandler
	// XappGetXappByNameHandler sets the operation handler for the get xapp by name operation
	XappGetXappByNameHandler xapp.GetXappByNameHandler
	// XappGetXappInstanceByNameHandler sets the operation handler for the get xapp instance by name operation
	XappGetXappInstanceByNameHandler xapp.GetXappInstanceByNameHandler
	// XappListAllXappsHandler sets the operation handler for the list all xapps operation
	XappListAllXappsHandler xapp.ListAllXappsHandler
	// ModifySubscriptionHandler sets the operation handler for the modify subscription operation
	ModifySubscriptionHandler ModifySubscriptionHandler
	// RegisterXappHandler sets the operation handler for the register xapp operation
	RegisterXappHandler RegisterXappHandler
	// XappUndeployXappHandler sets the operation handler for the undeploy xapp operation
	XappUndeployXappHandler xapp.UndeployXappHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *AppManagerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *AppManagerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *AppManagerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *AppManagerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *AppManagerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *AppManagerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *AppManagerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the AppManagerAPI
func (o *AppManagerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.XappGetConfigElementHandler == nil {
		unregistered = append(unregistered, "xapp.GetConfigElementHandler")
	}

	if o.XappModifyXappConfigHandler == nil {
		unregistered = append(unregistered, "xapp.ModifyXappConfigHandler")
	}

	if o.AddSubscriptionHandler == nil {
		unregistered = append(unregistered, "AddSubscriptionHandler")
	}

	if o.DeleteSubscriptionHandler == nil {
		unregistered = append(unregistered, "DeleteSubscriptionHandler")
	}

	if o.XappDeployXappHandler == nil {
		unregistered = append(unregistered, "xapp.DeployXappHandler")
	}

	if o.DeregisterXappHandler == nil {
		unregistered = append(unregistered, "DeregisterXappHandler")
	}

	if o.XappGetAllXappConfigHandler == nil {
		unregistered = append(unregistered, "xapp.GetAllXappConfigHandler")
	}

	if o.XappGetAllXappsHandler == nil {
		unregistered = append(unregistered, "xapp.GetAllXappsHandler")
	}

	if o.HealthGetHealthAliveHandler == nil {
		unregistered = append(unregistered, "health.GetHealthAliveHandler")
	}

	if o.HealthGetHealthReadyHandler == nil {
		unregistered = append(unregistered, "health.GetHealthReadyHandler")
	}

	if o.GetSubscriptionByIDHandler == nil {
		unregistered = append(unregistered, "GetSubscriptionByIDHandler")
	}

	if o.GetSubscriptionsHandler == nil {
		unregistered = append(unregistered, "GetSubscriptionsHandler")
	}

	if o.XappGetXappByNameHandler == nil {
		unregistered = append(unregistered, "xapp.GetXappByNameHandler")
	}

	if o.XappGetXappInstanceByNameHandler == nil {
		unregistered = append(unregistered, "xapp.GetXappInstanceByNameHandler")
	}

	if o.XappListAllXappsHandler == nil {
		unregistered = append(unregistered, "xapp.ListAllXappsHandler")
	}

	if o.ModifySubscriptionHandler == nil {
		unregistered = append(unregistered, "ModifySubscriptionHandler")
	}

	if o.RegisterXappHandler == nil {
		unregistered = append(unregistered, "RegisterXappHandler")
	}

	if o.XappUndeployXappHandler == nil {
		unregistered = append(unregistered, "xapp.UndeployXappHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *AppManagerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *AppManagerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *AppManagerAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *AppManagerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *AppManagerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *AppManagerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the app manager API
func (o *AppManagerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *AppManagerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/{element}"] = xapp.NewGetConfigElement(o.context, o.XappGetConfigElementHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/config"] = xapp.NewModifyXappConfig(o.context, o.XappModifyXappConfigHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/subscriptions"] = NewAddSubscription(o.context, o.AddSubscriptionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/subscriptions/{subscriptionId}"] = NewDeleteSubscription(o.context, o.DeleteSubscriptionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/xapps"] = xapp.NewDeployXapp(o.context, o.XappDeployXappHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/deregister"] = NewDeregisterXapp(o.context, o.DeregisterXappHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config"] = xapp.NewGetAllXappConfig(o.context, o.XappGetAllXappConfigHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/xapps"] = xapp.NewGetAllXapps(o.context, o.XappGetAllXappsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/health/alive"] = health.NewGetHealthAlive(o.context, o.HealthGetHealthAliveHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/health/ready"] = health.NewGetHealthReady(o.context, o.HealthGetHealthReadyHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subscriptions/{subscriptionId}"] = NewGetSubscriptionByID(o.context, o.GetSubscriptionByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subscriptions"] = NewGetSubscriptions(o.context, o.GetSubscriptionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/xapps/{xAppName}"] = xapp.NewGetXappByName(o.context, o.XappGetXappByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/xapps/{xAppName}/instances/{xAppInstanceName}"] = xapp.NewGetXappInstanceByName(o.context, o.XappGetXappInstanceByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/xapps/list"] = xapp.NewListAllXapps(o.context, o.XappListAllXappsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/subscriptions/{subscriptionId}"] = NewModifySubscription(o.context, o.ModifySubscriptionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/register"] = NewRegisterXapp(o.context, o.RegisterXappHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/xapps/{xAppName}"] = xapp.NewUndeployXapp(o.context, o.XappUndeployXappHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *AppManagerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *AppManagerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *AppManagerAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *AppManagerAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
