// Code generated by go-swagger; DO NOT EDIT.

package xapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAllXappConfigHandlerFunc turns a function with the right signature into a get all xapp config handler
type GetAllXappConfigHandlerFunc func(GetAllXappConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllXappConfigHandlerFunc) Handle(params GetAllXappConfigParams) middleware.Responder {
	return fn(params)
}

// GetAllXappConfigHandler interface for that can handle valid get all xapp config params
type GetAllXappConfigHandler interface {
	Handle(GetAllXappConfigParams) middleware.Responder
}

// NewGetAllXappConfig creates a new http.Handler for the get all xapp config operation
func NewGetAllXappConfig(ctx *middleware.Context, handler GetAllXappConfigHandler) *GetAllXappConfig {
	return &GetAllXappConfig{Context: ctx, Handler: handler}
}

/*GetAllXappConfig swagger:route GET /config xapp getAllXappConfig

Returns the configuration of all xapps

*/
type GetAllXappConfig struct {
	Context *middleware.Context
	Handler GetAllXappConfigHandler
}

func (o *GetAllXappConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAllXappConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
