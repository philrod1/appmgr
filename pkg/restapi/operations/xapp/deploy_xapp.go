// Code generated by go-swagger; DO NOT EDIT.

package xapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeployXappHandlerFunc turns a function with the right signature into a deploy xapp handler
type DeployXappHandlerFunc func(DeployXappParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeployXappHandlerFunc) Handle(params DeployXappParams) middleware.Responder {
	return fn(params)
}

// DeployXappHandler interface for that can handle valid deploy xapp params
type DeployXappHandler interface {
	Handle(DeployXappParams) middleware.Responder
}

// NewDeployXapp creates a new http.Handler for the deploy xapp operation
func NewDeployXapp(ctx *middleware.Context, handler DeployXappHandler) *DeployXapp {
	return &DeployXapp{Context: ctx, Handler: handler}
}

/*DeployXapp swagger:route POST /xapps xapp deployXapp

Deploy a xapp

*/
type DeployXapp struct {
	Context *middleware.Context
	Handler DeployXappHandler
}

func (o *DeployXapp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeployXappParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
